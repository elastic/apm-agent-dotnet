ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/dotnet[elastic.co]
endif::[]

[[configuration]]
== Configuration

You can utilize configuration options to adapt the Elastic APM agent to your needs. There are multiple configuration sources, each with different naming conventions for the property key.

By default, the agent uses environment variables. Additionally, on ASP.NET Core, the agent can plug into the https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.2[Microsoft.Extensions.Configuration] infrastructure.

[[configuration-on-asp-net-core]]
=== Configuration on ASP.NET Core
The `UseElasticApm()` extension method offers an overload to pass an `IConfiguration` instance to the APM Agent. By using this overload in a typical ASP.NET Core application, the `Startup.cs` file would contain code similar to the following:

[source,csharp]
----
public class Startup
{
    public Startup(IConfiguration configuration)
    {
        Configuration = configuration;
    }

    public void Configure(IApplicationBuilder app, IHostingEnvironment env)
    {
        //Registers the agent with an IConfiguration instance:
        app.UseElasticApm(Configuration);

        //Rest of the Configure() method...
    }
}
----

With this you can use any configuration source that you configured on the `IConfiguration` instance that you passed to the APM Agent. You can find the key of each configuration below in the IConfiguration key column.

NOTE: By simply calling `app.UseElasticApm()` without the overload, the agent will read configurations only from environment variables.

[float]
[[sample-config]]
==== Sample configuration file

Below is a sample `appsettings.json` configuration file for a typical ASP.NET Core application. There are two important takeaways:

1. The part below `ElasticApm` is fetched by the agent if the corresponding `IConfiguration` is passed to the agent.
2. With ASP.NET Core, you must set `LogLevel for the internal APM logger in the standard `Logging` section with the `ElasticApm` category name.

[source,js]
----
{
  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "Elastic.Apm": "Debug"
    }
  },
  "AllowedHosts": "*",
  "ElasticApm":
    {
      "ServerUrls":  "http://myapmserver:8200",
      "TransactionSampleRate": 1.0
    }
}
----

In certain scenarios -- like when you're not using ASP.NET Core -- you wont activate the agent with the `UseElasticApm()` method.
In this case, you can set the log level of the agent with `ElasticApm:LogLevel`, as shown in the following `appsettings.json` file:

[source,js]
----
{
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ElasticApm":
    {
      "LogLevel":  "Debug",
      "ServerUrls":  "http://myapmserver:8200",
      "TransactionSampleRate": 1.0
    }
}
----

[[config-core]]
=== Core configuration options

[float]
[[config-service-name]]
==== `ServiceName`

This is used to keep all the errors and transactions of your service together
and is the primary filter in the Elastic APM user interface.

NOTE: The service name must conform to this regular expression: ^[a-zA-Z0-9 _-]+$. In less regexy terms: Your service name must only contain characters from the ASCII alphabet, numbers, dashes, underscores and spaces. Characters in service name which don't match regular expression will be replaced by `__` symbol.

[options="header"]
|============
| Environment variable name      | IConfiguration key 
| `ELASTIC_APM_SERVICE_NAME` | `ElasticApm:ServiceName`
|============

[options="header"]
|============
| Default                          | Type
| Name of the entry assembly       | String 
|============

[float]
[[config-service-version]]
==== `ServiceVersion`

A version string for the currently deployed version of the service. If you donâ€™t
version your deployments, the recommended value for this field is the commit identifier
of the deployed revision, e.g. the output of git rev-parse HEAD.

[options="header"]
|============
| Environment variable name      | IConfiguration key 
| `ELASTIC_APM_SERVICE_VERSION` | `ElasticApm:ServiceVersion`
|============

[options="header"]
|============
| Default                                        | Type
| Informational version of the entry assembly    | String 
|============

[float]
[[config-transaction-sample-rate]]
==== `TransactionSampleRate`

By default, the agent will sample every transaction (e.g. a request to your service).
To reduce overhead and storage requirements, you can set the sample rate to a value between 0.0 and 1.0.
The agent will still record the overall time and result for unsampled transactions,
but no context information, labels, or spans will be recorded.

NOTE: When parsing the value for this option, the agent doesn't consider the current culture.
It also expects that a period (`.`) is used to separate the integer and the fraction of a floating-point number.

[options="header"]
|============
| Environment variable name             | IConfiguration key 
| `ELASTIC_APM_TRANSACTION_SAMPLE_RATE` | `ElasticApm:TransactionSampleRate`
|============

[options="header"]
|============
| Default | Type
| 1.0     | Double 
|============

[[config-reporter]]
=== Reporter configuration options

[float]
[[config-secret-token]]
==== `SecretToken`

[options="header"]
|============
| Environment variable name | IConfiguration key
| `ELASTIC_APM_SECRET_TOKEN` | `ElasticApm:SecretToken`
|============

[options="header"]
|============
| Default                 | Type
| `<none>`                | String
|============

This string is used to ensure that only your agents can send data to your APM server.

Both the agents and the APM server have to be configured with the same secret token.
Use this setting in case the APM Server requires a token (e.g. APM Server in Elastic Cloud).

[float]
[[config-server-urls]]
==== `ServerUrls`

[options="header"]
|============
| Environment variable name | IConfiguration key
| `ELASTIC_APM_SERVER_URLS` | `ElasticApm:ServerUrls`
|============

[options="header"]
|============
| Default                 | Type
| `http://localhost:8200` | String
|============

The URL for your APM Server. The URL must be fully qualified, including protocol (`http` or `https`) and port.

NOTE: Providing multiple URLs is not supported by the agent yet. If multiple URLs are provided only the first one will be used.

[float]
[[config-log-level]]
==== `LogLevel`

[options="header"]
|============
| Environment variable name | IConfiguration key
| `ELASTIC_APM_LOG_LEVEL`   | `ElasticApm:LogLevel`
|============

[options="header"]
|============
| Default                 | Type
| `Error`                 | String
|============

Sets the logging level for the agent.

Valid options: `Error`, `Warning`, `Info`, `Debug`.

[float]
[[config-metrics-interval]]
==== `MetricsInterval` (added[1.0.0-beta1])

The interval at which the agent sends metrics to the APM Server.
Must be at least `1s`.
Set to `0s` to deactivate.

Supports the duration suffixes `ms`, `s` and `m`.
Example: `30s`.
The default unit for this option is `s`.

[options="header"]
|============
| Default                 | Type
| `30s`                   | TimeDuration
|============


[options="header"]
|============
| Environment variable name      | IConfiguration key 
| `ELASTIC_APM_METRICS_INTERVAL` | `ElasticApm:MetricsInterval`
|============

[[config-http]]
=== HTTP configuration options

[float]
[[config-capture-headers]]
==== `CaptureHeaders` (performance)

[options="header"]
|============
| Environment variable name     | IConfiguration key
| `ELASTIC_APM_CAPTURE_HEADERS` | `ElasticApm:CaptureHeaders`
|============

[options="header"]
|============
| Default                 | Type
| `true`                  | Boolean
|============

If set to `true`,
the agent will capture request and response headers, including cookies.

NOTE: Setting this to `false` reduces memory allocations, network bandwidth and disk space used by Elasticsearch.

[[config-stacktrace]]
=== Stacktrace configuration options
[float]
[[config-stack-trace-limit]]
==== `StackTraceLimit` (performance)

Setting it to 0 will disable stack trace collection. Any positive integer value will be used as the maximum number of frames to collect. Setting it to -1 means that all frames will be collected.

[options="header"]
|============
| Default                          | Type
| `50` | Integer
|============

[options="header"]
|============
| Environment variable name     | IConfiguration key
| `ELASTIC_APM_STACK_TRACE_LIMIT` | `ElasticApm:StackTraceLimit`
|============

[float]
[[config-span-frames-min-duration]]
==== `SpanFramesMinDuration` (performance)

In its default settings,
the APM agent collects a stack trace for every recorded span with duration longer than 5ms.
While this is very helpful to find the exact place in your code that causes the span,
collecting this stack trace does have some overhead. 
When setting this option to a negative value, like `-1ms`, stack traces will be collected for all spans.
Setting it to a positive value, e.g. `5ms`,
will limit stack trace collection to spans with durations equal to or longer than the given value,
e.g. 5 milliseconds.

To disable stack trace collection for spans completely, set the value to `0ms`.

Supports the duration suffixes `ms`, `s` and `m`.
Example: `5ms`.
The default unit for this option is `ms`

[options="header"]
|============
| Default                          | Type
| `5ms` | TimeDuration
|============

[options="header"]
|============
| Environment variable name     | IConfiguration key
| `ELASTIC_APM_SPAN_FRAMES_MIN_DURATION` | `ElasticApm:SpanFramesMinDuration`
|============