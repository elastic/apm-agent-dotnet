:nuget: https://www.nuget.org/packages
:dot: .

[[setup-asp-dot-net]]
=== ASP.NET

[float]
==== Quick start

To enable auto instrumentation for ASP.NET (Full .NET Framework), you need to install the `Elastic.Apm.AspNetFullFramework` package, add a reference
to the package in your `web.config` file, and then compile and deploy your application.

. Ensure you have access to the application source code and install the {nuget}/Elastic.Apm.AspNetFullFramework[`Elastic.Apm.AspNetFullFramework`]
package.

. Reference the `Elastic.Apm.AspNetFullFramework` in your application's `web.config` file by adding the `ElasticApmModule` IIS module:
+
[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <system.webServer>
        <modules>
            <add name="ElasticApmModule" type="Elastic.Apm.AspNetFullFramework.ElasticApmModule, Elastic.Apm.AspNetFullFramework" />
        </modules>
    </system.webServer>
</configuration>
----
+
NOTE: There are two available configuration sources. To learn more, see <<configuration-on-asp-net>>.
+
By default, the agent creates transactions for all HTTP requests, including static content:
.html pages, images, etc.
+
To create transactions only for HTTP requests with dynamic content,
such as `.aspx` pages, add the `managedHandler` preCondition to your `web.config` file:
+
[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <system.webServer>
        <modules>
            <add name="ElasticApmModule" type="Elastic.Apm.AspNetFullFramework.ElasticApmModule, Elastic.Apm.AspNetFullFramework" preCondition="managedHandler" />
        </modules>
    </system.webServer>
</configuration>
----
+
NOTE: To learn more about adding modules, see the https://docs.microsoft.com/en-us/iis/configuration/system.webserver/modules/add[Microsoft docs].

. Recompile your application and deploy it.
+
The `ElasticApmModule` instantiates the APM agent on the first initialization. However, there may be some scenarios where
you want to control the agent instantiation, such as configuring filters in the application start.
+
To do so, the `ElasticApmModule` exposes a `CreateAgentComponents()` method that returns agent components configured to work with
ASP.NET Full Framework, which can then instantiate the agent.
+
For example, you can add transaction filters to the agent in the application start:
+
[source, c#]
----
public class MvcApplication : HttpApplication
{
    protected void Application_Start()
    {
        // other application startup e.g. RouteConfig, etc.

        // set up agent with components
        var agentComponents = ElasticApmModule.CreateAgentComponents();
        Agent.Setup(agentComponents);

        // add transaction filter
        Agent.AddFilter((ITransaction t) =>
        {
            t.SetLabel("foo", "bar");
            return t;
        });
    }
}
----
+
Now, the `ElasticApmModule` will use the instantiated instance of the APM agent upon initialization.