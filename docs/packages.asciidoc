:nuget: https://www.nuget.org/packages
:dot: .

[[packages]]
== NuGet packages

Agent instrumentations are released as a set of NuGet packages available on https://nuget.org[nuget.org]. 
You can add the Agent and specific instrumentations to your .NET application 
by referencing one or more of these packages.

[float]
== Get started

* <<setup-azure-cosmosdb>>
* <<setup-azure-servicebus>>
* <<setup-azure-storage>>
* <<setup-ef6>>
* <<setup-ef-core>>
* <<setup-elasticsearch>>
* <<setup-grpc>>
* <<setup-mongo-db>>
* <<setup-sqlclient>>
* <<setup-stackexchange-redis>>

[float]
== Packages

The following NuGet packages are available:

{nuget}/Elastic.Apm[**Elastic.Apm**]::

The core agent package, containing the <<public-api>> of the agent. It also contains every tracing component to trace classes that are part of .NET Standard 2.0, which includes the monitoring part for `HttpClient`. Every other Elastic APM package references this package.

{nuget}/Elastic.Apm.NetCoreAll[**Elastic.Apm.NetCoreAll**]::

A meta package that references all other Elastic APM .NET agent package that can automatically 
configure instrumentation.
+
If you plan to monitor a typical ASP.NET Core application that depends on the {nuget}/Microsoft.AspNetCore.All[Microsoft.AspNetCore.All] package, you should reference this package.
+
In order to avoid adding unnecessary dependencies in applications that arenâ€™t dependent on the {nuget}/Microsoft.AspNetCore.All[Microsoft.AspNetCore.All] package, we also offer some other packages - those are all referenced by the `Elastic.Apm.NetCoreAll` package.

{nuget}/Elastic.Apm.Extensions.Hosting[**Elastic.Apm.Extensions.Hosting**] (added[1.6.0-beta])::

A package for agent registration integration with `Microsoft.Extensions.Hosting.IHostBuilder` registration.

[[setup-asp-net]]
<<setup-asp-net-core, Elastic.Apm.AspNetCore>>::

A package for instrumenting ASP.NET Core applications. The main difference between this package and the `Elastic.Apm.NetCoreAll` package is that this package only instruments ASP.NET Core by default, whereas
`Elastic.Apm.NetCoreAll` instruments all components that can be automatically configured, such as
Entity Framework Core, HTTP calls with `HttpClient`, database calls to SQL Server with `SqlClient`, etc.
Additional instrumentations can be added when using `Elastic.Apm.AspNetCore` by referencing the
respective NuGet packages and including their configuration code in agent setup.

<<setup-asp-dot-net, **Elastic.Apm.AspNetFullFramework**>>::

A package containing ASP.NET .NET Framework instrumentation.

<<setup-azure-cosmosdb, **Elastic.Apm.Azure.CosmosDb**>>::

A package containing instrumentation to capture spans for Azure Cosmos DB with
{nuget}/Microsoft.Azure.Cosmos[Microsoft.Azure.Cosmos], {nuget}/Microsoft.Azure.DocumentDb[Microsoft.Azure.DocumentDb], and {nuget}/Microsoft.Azure.DocumentDb.Core[Microsoft.Azure.DocumentDb.Core] packages.

<<setup-azure-servicebus, **Elastic.Apm.Azure.ServiceBus**>>::

A package containing instrumentation to capture transactions and spans for messages sent and received from Azure Service Bus with {nuget}/Microsoft.Azure.ServiceBus/[Microsoft.Azure.ServiceBus] and {nuget}/Azure.Messaging.ServiceBus/[Azure.Messaging.ServiceBus] packages.

<<setup-azure-storage, **Elastic.Apm.Azure.Storage**>>::

A package containing instrumentation to capture spans for interaction with Azure Storage with {nuget}/azure.storage.queues/[Azure.Storage.Queues], {nuget}/azure.storage.blobs/[Azure.Storage.Blobs] and {nuget}/azure.storage.files.shares/[Azure.Storage.Files.Shares] packages.

<<setup-ef-core, **Elastic.Apm.EntityFrameworkCore**>>::

A package containing Entity Framework Core instrumentation.

<<setup-ef6, **Elastic.Apm.EntityFramework6**>>::

A package containing an interceptor to automatically create spans for database operations 
executed by Entity Framework 6 on behalf of the application.

<<setup-mongo-db, **Elastic.Apm.MongoDb**>>::

A package containing support for {nuget}/MongoDB.Driver/[MongoDB.Driver].

<<setup-sqlclient, **Elastic.Apm.SqlClient**>>::

A package containing {nuget}/System.Data.SqlClient[System.Data.SqlClient] and {nuget}/Microsoft.Data.SqlClient[Microsoft.Data.SqlClient] instrumentation.

<<setup-stackexchange-redis, **Elastic.Apm.StackExchange.Redis**>>::

A package containing instrumentation to capture spans for commands sent to redis with {nuget}/StackExchange.Redis/[StackExchange.Redis] package.

[[setup-ef-core]]
=== Entity Framework Core

[float]
==== Quick start

Instrumentation can be enabled for Entity Framework Core by referencing {nuget}/Elastic.Apm.EntityFrameworkCore[`Elastic.Apm.EntityFrameworkCore`] package
and passing `EfCoreDiagnosticsSubscriber` to the `UseElasticApm` method in case of ASP.NET Core as following

[source,csharp]
----
app.UseElasticApm(Configuration, new EfCoreDiagnosticsSubscriber()); <1>
----
<1> Configuration is the `IConfiguration` instance passed to your `Startup` type

or passing `EfCoreDiagnosticsSubscriber` to the `Subscribe` method

[source,csharp]
----
Agent.Subscribe(new EfCoreDiagnosticsSubscriber());
----

Instrumentation listens for diagnostic events raised by `Microsoft.EntityFrameworkCore` 2.x+, creating database spans for executed commands.

[[setup-ef6]]
=== Entity Framework 6

[float]
==== Quick start

You can enable auto instrumentation for Entity Framework 6 by referencing the {nuget}/Elastic.Apm.EntityFramework6[`Elastic.Apm.EntityFramework6`] package
and including the `Ef6Interceptor` interceptor in your application's `web.config`:

[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <entityFramework>
        <interceptors>
            <interceptor type="Elastic.Apm.EntityFramework6.Ef6Interceptor, Elastic.Apm.EntityFramework6" />
        </interceptors>
    </entityFramework>
</configuration>
----

As an alternative to registering the interceptor via the configuration, you can register it in the application code:

[source,csharp]
----
DbInterception.Add(new Elastic.Apm.EntityFramework6.Ef6Interceptor());
----

For example, in an ASP.NET application, you can place the above call in the `Application_Start` method.

Instrumentation works with EntityFramework 6.2+ NuGet packages.

NOTE: Be careful not to execute `DbInterception.Add` for the same interceptor type more than once,
as this will register multiple instances, causing multiple database spans to be captured for every SQL command.

[[setup-elasticsearch]]
=== Elasticsearch

[float]
==== Quick start

Instrumentation can be enabled for Elasticsearch when using the official Elasticsearch clients, Elasticsearch.Net and Nest, by referencing
{nuget}/Elastic.Apm.Elasticsearch[`Elastic.Apm.Elasticsearch`] package and passing `ElasticsearchDiagnosticsSubscriber` to the `UseElasticApm` 
method in case of ASP.NET Core as following

[source,csharp]
----
app.UseElasticApm(Configuration, new ElasticsearchDiagnosticsSubscriber()); <1>
----
<1> Configuration is the `IConfiguration` instance passed to your `Startup` type

or passing `ElasticsearchDiagnosticsSubscriber` to the `Subscribe` method


[source,csharp]
----
Agent.Subscribe(new ElasticsearchDiagnosticsSubscriber());
----

Instrumentation listens for activities raised by `Elasticsearch.Net` and `Nest` 7.6.0+, creating spans for executed requests.

[IMPORTANT]
--
If you're using `Elasticsearch.Net` and `Nest` 7.10.1 or 7.11.0, upgrade to at least 7.11.1 which fixes a bug in span capturing.
--

[[setup-grpc]]
=== gRPC

[float]
==== Quick start

Automatic instrumentation for gRPC can be enabled for both client-side and server-side gRPC calls.

Automatic instrumentation for ASP.NET Core server-side is built in to <<setup-asp-net-core, NuGet package>>

Automatic instrumentation can be enabled for the client-side by referencing {nuget}/Elastic.Apm.GrpcClient[`Elastic.Apm.GrpcClient`] package
and passing `GrpcClientDiagnosticListener` to the `UseElasticApm` method in case of ASP.NET Core

[source,csharp]
----
app.UseElasticApm(Configuration, new GrpcClientDiagnosticListener()); <1>
----
<1> Configuration is the `IConfiguration` instance passed to your `Startup` type

or passing `GrpcClientDiagnosticSubscriber` to the `Subscribe` method

[source,csharp]
----
Agent.Subscribe(new GrpcClientDiagnosticSubscriber());
----

Diagnostic events from `Grpc.Net.Client` are captured as spans.


[[setup-sqlclient]]
=== SqlClient

[float]
==== Quick start

You can enable auto instrumentation for `System.Data.SqlClient` or `Microsoft.Data.SqlClient` by referencing {nuget}/Elastic.Apm.SqlClient[`Elastic.Apm.SqlClient`] package
and passing `SqlClientDiagnosticSubscriber` to the `UseElasticApm` method in case of ASP.NET Core as it shown in example:

[source,csharp]
----
// Enable tracing of outgoing db requests
app.UseElasticApm(Configuration, new SqlClientDiagnosticSubscriber()); <1>
----
<1> Configuration is the `IConfiguration` instance passed to your `Startup` type

or passing `SqlClientDiagnosticSubscriber` to the `Subscribe` method and make sure that the code is called only once, otherwise the same database call could be captured multiple times:

[source,csharp]
----
// Enable tracing of outgoing db requests
Agent.Subscribe(new SqlClientDiagnosticSubscriber());  
----

[NOTE]
--
Auto instrumentation  for `System.Data.SqlClient` is available for both .NET Core and .NET Framework applications, however, support of .NET Framework has one limitation:
command text cannot be captured. 

Auto instrumentation for `Microsoft.Data.SqlClient` is available only for .NET Core at the moment.

As an alternative to using the `Elastic.Apm.SqlClient` package to instrument database calls, see <<setup-auto-instrumentation>>.
--

[[setup-stackexchange-redis]]
=== StackExchange.Redis

[float]
==== Quick start

Instrumentation can be enabled for `StackExchange.Redis` by referencing {nuget}/Elastic.Apm.StackExchange.Redis[`Elastic.Apm.StackExchange.Redis`] package
and calling the `UseElasticApm()` extension method defined in `Elastic.Apm.StackExchange.Redis`, on `IConnectionMultiplexer`

[source,csharp]
----
// using Elastic.Apm.StackExchange.Redis;

var connection = await ConnectionMultiplexer.ConnectAsync("<redis connection>");
connection.UseElasticApm();
----

A callback is registered with the `IConnectionMultiplexer` to provide a profiling session for each transaction and span that captures redis commands
sent with `IConnectionMultiplexer`.

[[setup-azure-cosmosdb]]
=== Azure Cosmos DB

[float]
==== Quick start

Instrumentation can be enabled for Azure Cosmos DB by referencing {nuget}/Elastic.Apm.Azure.CosmosDb[`Elastic.Apm.Azure.CosmosDb`]
package and subscribing to diagnostic events.

[source, csharp]
----
Agent.Subscribe(new AzureCosmosDbDiagnosticsSubscriber());
----

Diagnostic events from `Microsoft.Azure.Cosmos`, `Microsoft.Azure.DocumentDb`, and `Microsoft.Azure.DocumentDb.Core` are captured as DB spans.

[[setup-azure-servicebus]]
=== Azure Service Bus

[float]
==== Quick start

Instrumentation can be enabled for Azure Service Bus by referencing {nuget}/Elastic.Apm.Azure.ServiceBus[`Elastic.Apm.Azure.ServiceBus`] package and subscribing to diagnostic events
using one of the subscribers:

. If the agent is included by referencing the `Elastic.Apm.NetCoreAll` package, the subscribers will be automatically subscribed with the agent, and no further action is required.
. If you're using `Microsoft.Azure.ServiceBus`, subscribe `MicrosoftAzureServiceBusDiagnosticsSubscriber` with the agent
+
[source, csharp]
----
Agent.Subscribe(new MicrosoftAzureServiceBusDiagnosticsSubscriber());
----
. If you're using `Azure.Messaging.ServiceBus`, subscribe `AzureMessagingServiceBusDiagnosticsSubscriber` with the agent
+
[source, csharp]
----
Agent.Subscribe(new AzureMessagingServiceBusDiagnosticsSubscriber());
----

A new transaction is created when

* one or more messages are received from a queue or topic subscription.
* a message is receive deferred from a queue or topic subscription.

A new span is created when there is a current transaction, and when

* one or more messages are sent to a queue or topic.
* one or more messages are scheduled to a queue or a topic.

[[setup-azure-storage]]
=== Azure Storage

[float]
==== Quick start

Instrumentation can be enabled for Azure Storage by referencing {nuget}/Elastic.Apm.Azure.Storage[`Elastic.Apm.Azure.Storage`] package and subscribing to diagnostic events using one of the subscribers:

* If the agent is included by referencing the `Elastic.Apm.NetCoreAll` package, the subscribers will be automatically subscribed with the agent, and no further action is required.
* If you're using `Azure.Storage.Blobs`, subscribe `AzureBlobStorageDiagnosticsSubscriber` with the agent
+
[source, csharp]
----
Agent.Subscribe(new AzureBlobStorageDiagnosticsSubscriber());
----
* If you're using `Azure.Storage.Queues`, subscribe `AzureQueueStorageDiagnosticsSubscriber` with the agent
+
[source, csharp]
----
Agent.Subscribe(new AzureQueueStorageDiagnosticsSubscriber());
----
* If you're using `Azure.Storage.Files.Shares`, subscribe `AzureFileShareStorageDiagnosticsSubscriber` with the agent
+
[source, csharp]
----
Agent.Subscribe(new AzureFileShareStorageDiagnosticsSubscriber());
----

For Azure Queue storage, 

* A new transaction is created when one or more messages are received from a queue
* A new span is created when there is a current transaction, and when a message is sent to a queue

For Azure Blob storage, a new span is created when there is a current transaction and when a request
is made to blob storage.

For Azure File Share storage, a new span is crated when there is a current transaction and when a request
is made to file storage.

[[setup-mongo-db]]
=== MongoDB

[float]
==== Quick start

Instrumentation for MongoDB works with the official MongoDb.Driver 2.4.4+ driver packages.
A prerequisite for auto instrumentation is to configure the `MongoClient` with `MongoDbEventSubscriber`:

[source,csharp]
----
var settings = MongoClientSettings.FromConnectionString(mongoConnectionString);

settings.ClusterConfigurator = builder => builder.Subscribe(new MongoDbEventSubscriber());
var mongoClient = new MongoClient(settings);
----

Once the above configuration is in place

* if the agent is included by referencing the `Elastic.Apm.NetCoreAll` package, it will automatically capture 
calls to MongoDB on every active transaction, and no further action is required.
* you can manually activate auto instrumentation from the `Elastic.Apm.MongoDb` package by calling

[source,csharp]
----
Agent.Subscribe(new MongoDbDiagnosticsSubscriber());
----

[IMPORTANT]
--
MongoDB integration is currently supported on .NET Core and newer. Due to MongoDb.Driver assemblies not
being strongly named, they cannot be used with Elastic APM's strongly named assemblies on .NET Framework.
--
