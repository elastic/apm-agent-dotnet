[[setup]]
== Set up the Agent
The .NET Agent ships as a set of NuGet packages via https://nuget.org[nuget.org].
You can add the Agent to your .NET application by referencing one of these packages.

On .NET Core the agent also supports auto instrumentation without any code change and without any recompilation of your projects. See section <<zero-code-change-setup,  Zero code change setup on .NET Core>> for more details.

[float]
== Get started

* <<setup-dotnet-net-core>>
* <<setup-asp-net-core>>
* <<setup-asp-dot-net>>
* <<setup-ef6>>
* <<setup-sqlclient>>
* <<setup-stackexchange-redis>>
* <<setup-azure-servicebus>>
* <<setup-general>>

[float]
== Packages

The following packages are available:

https://www.nuget.org/packages/Elastic.Apm.NetCoreAll[**Elastic.Apm.NetCoreAll**]::

This is a meta package that references every other Elastic APM .NET agent package. If you plan to monitor a typical ASP.NET Core application that depends on the https://www.nuget.org/packages/Microsoft.AspNetCore.All[Microsoft.AspNetCore.All] package and uses Entity Framework Core then you should reference this package.
In order to avoid adding unnecessary dependencies in applications that aren’t depending on the https://www.nuget.org/packages/Microsoft.AspNetCore.All[Microsoft.AspNetCore.All] package we also offer some other packages - those are all referenced by the `Elastic.Apm.NetCoreAll` package.

https://www.nuget.org/packages/Elastic.Apm[**Elastic.Apm**]::

This is the core of the agent, which we didn’t name “Core”, because someone already took that name :) This package also contains the <<public-api>> and it is a .NET Standard 2.0 package. We also ship every tracing component that traces classes that are part of .NET Standard 2.0 in this package, which includes the monitoring part for HttpClient. Every other Elastic APM package references this package.

https://www.nuget.org/packages/Elastic.Apm.Extensions.Hosting[**Elastic.Apm.Extensions.Hosting**](added[1.6.0-beta])::

This package offers integration with `Microsoft.Extensions.Hosting.IHostBuilder` for agent registration.

[[setup-asp-net]]
https://www.nuget.org/packages/Elastic.Apm.AspNetCore[**Elastic.Apm.AspNetCore**]::

This package contains ASP.NET Core monitoring related code. The main difference between this package and the `Elastic.Apm.NetCoreAll` package is that this package does not reference the `Elastic.Apm.EntityFrameworkCore` package, so if you have an ASP.NET Core application that does not use EF Core and you want to avoid adding additional unused references, you should use this package.
https://www.nuget.org/packages/Elastic.Apm.EntityFrameworkCore[**Elastic.Apm.EntityFrameworkCore**]::

This package contains EF Core monitoring related code.
https://www.nuget.org/packages/Elastic.Apm.AspNetFullFramework[**Elastic.Apm.AspNetFullFramework**]::

This package contains ASP.NET (Full .NET Framework) monitoring related code.

https://www.nuget.org/packages/Elastic.Apm.EntityFramework6[**Elastic.Apm.EntityFramework6**]::

This package contains an interceptor that automatically creates spans for DB operations executed by Entity Framework 6 (EF6) on behalf of the application.

https://www.nuget.org/packages/Elastic.Apm.SqlClient[**Elastic.Apm.SqlClient**]::

This package contains https://www.nuget.org/packages/System.Data.SqlClient[System.Data.SqlClient] and https://www.nuget.org/packages/Microsoft.Data.SqlClient[Microsoft.Data.SqlClient] monitoring related code.

https://www.nuget.org/packages/Elastic.Apm.StackExchange.Redis[**Elastic.Apm.StackExchange.Redis**]::

This packages contains instrumentation to capture spans for commands sent to redis with https://www.nuget.org/packages/StackExchange.Redis/[StackExchange.Redis] package.

https://www.nuget.org/packages/Elastic.Apm.StackExchange.Redis[**Elastic.Apm.Azure.ServiceBus**]::

This packages contains instrumentation to capture transactions and spans for messages sent and received from Azure Service Bus with https://www.nuget.org/packages/Microsoft.Azure.ServiceBus/[Microsoft.Azure.ServiceBus] and https://www.nuget.org/packages/Azure.Messaging.ServiceBus/[Azure.Messaging.ServiceBus] packages.


[[setup-dotnet-net-core]]
=== .NET Core

[float]
==== Quick start

On .NET Core, the agent can be registered on the `IHostBuilder`. This applies to both ASP.NET Core and to other .NET Core applications that depend on `IHostBuilder`, like https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services[background tasks]. In this case, you need to reference the https://www.nuget.org/packages/Elastic.Apm.NetCoreAll[`Elastic.Apm.NetCoreAll`] package.


[source,csharp]
----
using Elastic.Apm.NetCoreAll;

namespace MyApplication
{
  public class Program
  {
    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); })
            .UseAllElasticApm();

    public static void Main(string[] args) => CreateHostBuilder(args).Build().Run();
  }
}
----

With the `UseAllElasticApm()`, the agent with all its components is turned on. On ASP.NET Core, it'll automatically capture incoming requests, database calls through supported technologies, outgoing HTTP requests, and so on.

[float]
==== Manual instrumentation

The `UseAllElasticApm` will add an `ITracer` to the Dependency Injection system. This means you can use the <<public-api>> in your code to manually instrument your application:

[source,csharp]
----
using Elastic.Apm.Api;

namespace WebApplication.Controllers
{
    public class HomeController : Controller
    {
        private readonly ITracer _tracer;
        public HomeController(ITracer tracer) //inject ITracer
        => _tracer = tracer;

        public IActionResult Index()
        {
            //use ITracer
            var span = _tracer.CurrentTransaction?.StartSpan("MySampleSpan", "Sample");
            try
            {
                //your code here
            }
            catch (Exception e)
            {
                span?.CaptureException(e);
                throw;
            }
            finally { }
            {
                span?.End();
            }
            return View();
        }
    }
}
----

Similarly to this ASP.NET Core controller, you can use the same approach with `IHostedService` implementations.

[float]
==== Instrumentation modules

The `Elastic.Apm.NetCoreAll` will reference every agent component. This is usually not a problem, but if you want to keep dependencies minimal, you can also reference the `Elastic.Apm.Extensions.Hosting` and use the `UseElasticApm` method instead of `UseAllElasticApm`. With this you can control what the agent will listen for.

The following example only turns on outgoing HTTP monitoring (so, for instance, database or Elasticsearch calls won't be automatically captured):

[source,csharp]
----
    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); })
            .UseElasticApm(new HttpDiagnosticsSubscriber());

----


[float]
[[zero-code-change-setup]]
==== Zero code change setup on .NET Core (added[1.7])

If you can't or don't want to reference NuGet packages in your application, you can use the startup hook feature to inject the agent during startup, if your application runs on .NET Core. This feature is supported on .NET Core 2.2 and newer versions.

Steps:

. Download the `ElasticApmAgent_[version].zip` file from the https://github.com/elastic/apm-agent-dotnet/releases[Releases] page of the .NET APM Agent GitHub repository. You can find the file under Assets.
. Unzip the zip file into a folder.
. Set the `DOTNET_STARTUP_HOOKS` environment variable to point to the `ElasticApmAgentStartupHook.dll` file in the unzipped folder

[source,sh]
----
set DOTNET_STARTUP_HOOKS=[pathToAgent]\ElasticApmAgentStartupHook.dll
----

. Start your .NET Core application in a context where the `DOTNET_STARTUP_HOOKS` environment variable is visible.

With this setup the agent will be injected into the application during startup and it will start every auto instrumentation feature. On ASP.NET Core (including gRPC), incoming requests will be automatically captured. 

[NOTE]
--
Agent configuration can be controlled through environment variables with the startup hook feature.
--

[[setup-asp-net-core]]
=== ASP.NET Core

[float]
==== Quick start

We suggest using the approach described in the <<setup-dotnet-net-core, .NET Core setup instructions>>. We keep the `IApplicationBuilder` introduced here only for backwards compatibility.

For ASP.NET Core, once you reference the https://www.nuget.org/packages/Elastic.Apm.NetCoreAll[`Elastic.Apm.NetCoreAll`] package, you can enable auto instrumentation by calling the `UseAllElasticApm()` extension method:

[source,csharp]
----
using Elastic.Apm.NetCoreAll;

public class Startup
{
  public void Configure(IApplicationBuilder app, IHostingEnvironment env)
  {
    app.UseAllElasticApm(Configuration);
    //…rest of the method
  }
  //…rest of the class
}
----

The `app.UseAllElasticApm(...)` line must be the first line in the `Configure` method, otherwise the agent won't be able to properly measure the timing of your requests, and potentially complete requests may be missed by the agent.

With this you enable every agent component including ASP.NET Core tracing, monitoring of outgoing HTTP request, Entity Framework Core database tracing, etc.

In case you only reference the https://www.nuget.org/packages/Elastic.Apm.AspNetCore[`Elastic.Apm.AspNetCore`] package, you won't find the `UseAllElasticApm`. Instead you need to use the `UseElasticApm()` method from the `Elastic.Apm.AspNetCore` namespace. This method turns on ASP.NET Core tracing, and gives you the opportunity to manually turn on other components. By default it will only trace ASP.NET Core requests - No HTTP request tracing, database call tracing or any other tracing component will be turned on.

In case you would like to turn on specific tracing components you can pass those to the `UseElasticApm` method.

For example:

[source,csharp]
----
app.UseElasticApm(Configuration,
	new HttpDiagnosticsSubscriber(),  /* Enable tracing of outgoing HTTP requests */
	new EfCoreDiagnosticsSubscriber()); /* Enable tracing of database calls through EF Core*/
----

In case you only want to use the <<public-api>>, you don't need to do any initialization, you can simply start using the API and the agent will send the data to the APM Server.


[[setup-asp-dot-net]]
=== ASP.NET

[float]
==== Quick start

For ASP.NET (Full .NET Framework), once you've referenced the https://www.nuget.org/packages/Elastic.Apm.AspNetFullFramework[`Elastic.Apm.AspNetFullFramework`] package,
you can enable auto instrumentation by including the `ElasticApmModule` IIS Module in your application's `web.config`:
[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <system.webServer>
        <modules>
            <add name="ElasticApmModule" type="Elastic.Apm.AspNetFullFramework.ElasticApmModule, Elastic.Apm.AspNetFullFramework" />
        </modules>
    </system.webServer>
</configuration>
----

By default the agent creates transactions for all HTTP requests, including the ones for static content:
.html pages, images, etc. If you would like to create transactions only for HTTP requests with dynamic content,
such as `.aspx` pages, you can add `managedHandler` `preCondition`
(https://docs.microsoft.com/en-us/iis/configuration/system.webserver/modules/add[official documentation])
as shown in the following example:
[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <system.webServer>
        <modules>
            <add name="ElasticApmModule" type="Elastic.Apm.AspNetFullFramework.ElasticApmModule, Elastic.Apm.AspNetFullFramework" preCondition="managedHandler" />
        </modules>
    </system.webServer>
</configuration>
----

You can also configure the agent using `web.config` as described at <<configuration-on-asp-net>>.

The `ElasticApmModule` instantiates the APM agent on first initialization. There are some scenarios however where
you might want to control agent instantiatiation, such as configuring filters in application start. The
`ElasticApmModule` exposes a `CreateAgentComponents()` method that returns agent components configured to work with
ASP.NET Full Framework, that can then be used to instantiate the agent.

For example, one might wish to add transaction filters to the agent in application start

[source, c#]
----
public class MvcApplication : HttpApplication
{
    protected void Application_Start()
    {
        // other application startup e.g. RouteConfig, etc.

        // set up agent with components
        var agentComponents = ElasticApmModule.CreateAgentComponents();
        Agent.Setup(agentComponents);

        // add transaction filter
        Agent.AddFilter((ITransaction t) =>
        {
            t.SetLabel("foo", "bar");
            return t;
        });
    }
}
----

Now, the `ElasticApmModule` will use the already instantiated APM agent instance upon initialization.

[[setup-ef6]]
=== Entity Framework 6

[float]
==== Quick start

You can enable auto instrumentation for Entity Framework 6 by referencing the https://www.nuget.org/packages/Elastic.Apm.EntityFramework6[`Elastic.Apm.EntityFramework6`] package
and including the `Ef6Interceptor` interceptor in your application's `web.config`:

[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <entityFramework>
        <interceptors>
            <interceptor type="Elastic.Apm.EntityFramework6.Ef6Interceptor, Elastic.Apm.EntityFramework6" />
        </interceptors>
    </entityFramework>
</configuration>
----

As an alternative to registering the interceptor via the configuration, you can register it in the application code:
[source,csharp]
----
DbInterception.Add(new Elastic.Apm.EntityFramework6.Ef6Interceptor());
----
For example, in an ASP.NET MVC application, you can place the above call in the `Application_Start` method.

NOTE: Be careful not to execute `DbInterception.Add` for the same interceptor more than once,
or you'll get additional interceptor instances.
For example, if you add `Ef6Interceptor` interceptor twice, you'll see two spans for every SQL query.

[[setup-sqlclient]]
=== SqlClient

[float]
==== Quick start

You can enable auto instrumentation for `System.Data.SqlClient` or `Microsoft.Data.SqlClient` by referencing https://www.nuget.org/packages/Elastic.Apm.SqlClient[`Elastic.Apm.SqlClient`] package
and passing `SqlClientDiagnosticSubscriber` to the `UseElasticApm` method in case of ASP.NET Core as it shown in example:

[source,csharp]
----
app.UseElasticApm(Configuration,
	new SqlClientDiagnosticSubscriber());  /* Enable tracing of outgoing db requests */
----

or passing `SqlClientDiagnosticSubscriber` to the `Subscribe` method and make sure that the code is called only once, otherwise the same database call could be captured multiple times:

[source,csharp]
----
// you need add custom code to be sure that Subscribe called only once and in a thread-safe manner
if (Agent.IsConfigured) Agent.Subscribe(new SqlClientDiagnosticSubscriber());  /* Enable tracing of outgoing db requests */
----

NOTE: Auto instrumentation  for `System.Data.SqlClient` is available for both, .NET Core and .NET Framework applications, however, support of .NET Framework has one limitation:
command text cannot be captured. In case of auto instrumentation for `Microsoft.Data.SqlClient`, only .NET Core is supported, at the moment.

[[setup-stackexchange-redis]]
=== StackExchange.Redis

[float]
==== Quick start

Instrumentation can be enabled for `StackExchange.Redis` by referencing https://www.nuget.org/packages/Elastic.Apm.StackExchange.Redis[`Elastic.Apm.StackExchange.Redis`] package
and calling the `UseElasticApm()` extension method defined in `Elastic.Apm.StackExchange.Redis`, on `IConnectionMultiplexer`

[source,csharp]
----
// using Elastic.Apm.StackExchange.Redis;

var connection = await ConnectionMultiplexer.ConnectAsync("<redis connection>");
connection.UseElasticApm();
----

A callback is registered with the `IConnectionMultiplexer` to provide a profiling session for each transaction and span that captures redis commands
sent with `IConnectionMultiplexer`.

[[setup-azure-servicebus]]
=== Azure Service Bus

[float]
==== Quick start

Instrumentation can be enabled for Azure Service Bus by referencing https://www.nuget.org/packages/Elastic.Apm.Azure.ServiceBus[`Elastic.Apm.Azure.ServiceBus`] package and subscribing to diagnostic events
using one of the subscribers:

. If the agent is included by referencing the `Elastic.Apm.NetCoreAll` package, the subscribers will be automatically subscribed with the agent, and no further action is required.
. If you're using `Microsoft.Azure.ServiceBus`, subscribe `MicrosoftAzureServiceBusDiagnosticsSubscriber` with the agent
+
[source, csharp]
----
Agent.Subscribe(new MicrosoftAzureServiceBusDiagnosticsSubscriber());
----
. If you're using `Azure.Messaging.ServiceBus`, subscribe `AzureMessagingServiceBusDiagnosticsSubscriber` with the agent
+
[source, csharp]
----
Agent.Subscribe(new AzureMessagingServiceBusDiagnosticsSubscriber());
----

A new transaction is created when

* one or more messages are received from a queue or topic subscription.
* a message is receive deferred from a queue or topic subscription.

A new span is created when there is a current transaction, and when

* one or more messages are sent to a queue or topic.
* one or more messages are scheduled to a queue or a topic.

[[setup-general]]
=== Other .NET applications

If you have a .NET application that is not covered in this section, you can still use the agent and instrument your application manually.

To do this, add the https://www.nuget.org/packages/Elastic.Apm[Elastic.Apm] package to your application and use the <<public-api>> to manually create spans and transactions.
