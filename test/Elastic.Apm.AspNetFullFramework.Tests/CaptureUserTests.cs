// Licensed to Elasticsearch B.V under
// one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

using System.Linq;
using System.Threading.Tasks;
using AngleSharp;
using AngleSharp.Dom;
using AngleSharp.Html.Dom;
using AspNetFullFrameworkSampleApp.Models;
using FluentAssertions;
using Xunit.Abstractions;

namespace Elastic.Apm.AspNetFullFramework.Tests
{
	public class CaptureUserTests : TestsBase
	{
		public CaptureUserTests(ITestOutputHelper xUnitOutputHelper)
			// set sampleAppShouldHaveAccessToPerfCounters until https://github.com/elastic/apm-agent-dotnet/pull/973/commits/93e7a98e1f58b5c4f3d10c4499c96b384bc6c680 is merged
			: base(xUnitOutputHelper, sampleAppShouldHaveAccessToPerfCounters: true)
		{ }

		[AspNetFullFrameworkFact]
		public async Task User_Should_Contain_Id_And_Email_When_Using_Authenticated_ClaimsPrincipal()
		{
			var config = Configuration.Default
				.WithDefaultLoader()
				.WithDefaultCookies();

			var context = BrowsingContext.New(config);

			// register a user
			var registerUri = Consts.SampleApp.CreateUrl("/Account/Register");
			var document = await context.OpenAsync(registerUri);
			var form = document.QuerySelector<IHtmlFormElement>("#registerForm");
			var email = "russ@example.com";
			var password = "supersecret";
			await form.SubmitAsync(new RegisterViewModel
			{
				Email = email,
				Password = password,
				ConfirmPassword = password
			});

			// now login
			var loginUri = Consts.SampleApp.CreateUrl("/Account/Login");
			document = await context.OpenAsync(loginUri);
			form = document.QuerySelector<IHtmlFormElement>("#loginForm");
			await form.SubmitAsync(new LoginViewModel
			{
				Email = email,
				Password = password,
			});

			// verify that the user id and email are captured.
			await WaitAndCustomVerifyReceivedData(received =>
			{
				received.Transactions.Count.Should().BeGreaterThan(0);

				// get the latest transaction
				var transaction = received.Transactions.OrderByDescending(t => t.Timestamp).First();
				transaction.Context.User.UserName.Should().Be(email);
				transaction.Context.User.Email.Should().Be(email);

				// id is autogenerated in SQLite
				transaction.Context.User.Id.Should().NotBeNullOrEmpty();
			});
		}
	}
}
