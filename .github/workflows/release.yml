name: release

on:
  release:
    types: [published]

permissions:
  contents: read

env:
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  SLACK_CHANNEL: "#apm-agent-dotnet"

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      PREFIX_APM_AGENT: "build/output/ElasticApmAgent_"
      PREFIX_APM_PROFILER: "build/output/elastic_apm_profiler_"
      SUFFIX_APM_AGENT: ".zip"
      SUFFIX_APM_PROFILER: "-linux-x64.zip"
      DOCKER_IMAGE_NAME: "docker.elastic.co/observability/apm-agent-dotnet"
    permissions:
      attestations: write
      contents: write
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - name: Bootstrap Action Workspace
      id: bootstrap
      uses: ./.github/workflows/bootstrap
      with:
        rust: 'true'

    - name: Package
      run: ./build.sh pack

    - name: Release to Nuget
      run: .ci/deploy.sh ${{ secrets.NUGET_API_KEY }} ${{ secrets.NUGET_API_URL }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

    - name: Log in to the Elastic Container registry
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        registry: ${{ secrets.ELASTIC_DOCKER_REGISTRY }}
        username: ${{ secrets.ELASTIC_DOCKER_USERNAME }}
        password: ${{ secrets.ELASTIC_DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels)
      id: docker-meta
      uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96  # v5.6.1
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        flavor: |
          latest=auto
        tags: |
          # "1.2.3" and "latest" Docker tags on push of git tag "v1.2.3"
          type=semver,pattern={{version}},value=${{ steps.bootstrap.outputs.agent-version }}
          # "edge" Docker tag on git push to default branch
          type=edge

    - name: Build and Push Profiler Docker Image
      id: docker-push
      continue-on-error: true # continue for now until we see it working in action
      uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991  # v6.13.0
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker-meta.outputs.tags }}
        labels: ${{ steps.docker-meta.outputs.labels }}
        build-args: |
          AGENT_ZIP_FILE=${{ env.PREFIX_APM_PROFILER }}${{ steps.bootstrap.outputs.agent-version }}${{ env.SUFFIX_APM_PROFILER }}

    - name: Attest image
      uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4  # v2.2.0
      continue-on-error: true # continue for now until we see it working in action
      with:
        subject-name: ${{ env.DOCKER_IMAGE_NAME }}
        subject-digest: ${{ steps.docker-push.outputs.digest }}
        push-to-registry: true

    - name: generate build provenance (APM Agent)
      uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4  # v2.2.0
      with:
        subject-path: "${{ github.workspace }}/${{ env.PREFIX_APM_AGENT }}${{ steps.bootstrap.outputs.agent-version }}${{ env.SUFFIX_APM_AGENT }}"

    - name: generate build provenance (APM Profiler)
      uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4  # v2.2.0
      with:
        subject-path: "${{ github.workspace }}/${{ env.PREFIX_APM_PROFILER }}${{ steps.bootstrap.outputs.agent-version }}${{ env.SUFFIX_APM_PROFILER }}"

    - name: Attach Profiler And Startup Hooks
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.ref_name }} "${{ env.PREFIX_APM_AGENT }}${{ steps.bootstrap.outputs.agent-version }}${{ env.SUFFIX_APM_AGENT }}" "${{ env.PREFIX_APM_PROFILER }}${{ steps.bootstrap.outputs.agent-version }}${{ env.SUFFIX_APM_PROFILER }}"

    - if: ${{ success() }}
      uses: elastic/oblt-actions/slack/send@v1
      continue-on-error: true #continue for now until we see it working in action
      with:
        bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel-id: ${{ env.SLACK_CHANNEL }}
        message: |
          :large_green_circle: [${{ github.repository }}] Release *${{ github.ref_name }}* published.
          Build: (<${{ env.JOB_URL }}|here>)
          Release URL: (<https://github.com/elastic/apm-agent-dotnet/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}>)

    - if: ${{ failure() }}
      uses: elastic/oblt-actions/slack/send@v1
      continue-on-error: true #continue for now until we see it working in action
      with:
        bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel-id: ${{ env.SLACK_CHANNEL }}
        message: |
          :large_yellow_circle: [${{ github.repository }}] Release *${{ github.ref_name }}* could not be published.
          Build: (<${{ env.JOB_URL }}|here>)
          
  release-windows:
    runs-on: windows-2022
    needs: [ 'release']
    outputs:
      agent-version: ${{ steps.bootstrap.outputs.agent-version }}
      major-version: ${{ steps.bootstrap.outputs.major-version }}
    env:
      PREFIX_ZIP_FILE: "build/output/elastic_apm_profiler_"
      SUFFIX_ZIP_FILE: "-win-x64.zip"
    permissions:
      attestations: write
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Bootstrap Action Workspace
        id: bootstrap
        uses: ./.github/workflows/bootstrap
        with:
          rust: 'true'

      - name: Build profiler
        run: ./build.bat profiler-zip

      - name: generate build provenance (APM Profiler)
        uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4  # v2.2.0
        with:
          subject-path: "${{ github.workspace }}/${{ env.PREFIX_ZIP_FILE }}${{ steps.bootstrap.outputs.agent-version }}${{ env.SUFFIX_ZIP_FILE }}"

      - name: Attach Profiler
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} "${{ env.PREFIX_ZIP_FILE }}${{ steps.bootstrap.outputs.agent-version }}${{ env.SUFFIX_ZIP_FILE }}"

  post-release:
    needs: [ 'release-windows']
    runs-on: ubuntu-latest
    env:
      GIT_TAG: v${{ needs.release-windows.outputs.agent-version }}
      NEW_BRANCH: update/${{ needs.release-windows.outputs.agent-version }}
      TARGET_BRANCH: ${{ needs.release-windows.outputs.major-version }}.x
    steps:
      - name: Get token
        id: get_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.OBS_AUTOMATION_APP_ID }}
          private_key: ${{ secrets.OBS_AUTOMATION_APP_PEM }}
          permissions: >-
            {
              "contents": "write",
              "pull_requests": "write"
            }
          repositories: >-
            ["apm-agent-dotnet"]

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.get_token.outputs.token }}

      - name: Setup git config
        uses: elastic/oblt-actions/git/setup@v1
        with:
          github-token: ${{ steps.get_token.outputs.token }}

      - name: Create GitHub Pull Request if minor release.
        env:
          GH_TOKEN: ${{ steps.get_token.outputs.token }}
        run: |
          echo "as long as there is a major.x branch"
          existed_in_local=$(git ls-remote --heads origin ${TARGET_BRANCH})
          if [ -z "${existed_in_local}" ]; then
            echo -e "::warning::Target branch '${TARGET_BRANCH}' does not exist."
            exit 0
          fi
          git checkout $TARGET_BRANCH
          git checkout -b ${NEW_BRANCH}
          git format-patch -k --stdout ${TARGET_BRANCH}...origin/main -- docs CHANGELOG.asciidoc | git am -3 -k
          git push origin ${NEW_BRANCH}
          gh pr create \
            --title "post-release: ${GIT_TAG}" \
            --body "Generated automatically with ${JOB_URL}" \
            --head "elastic:${NEW_BRANCH}" \
            --base "$TARGET_BRANCH" \
            --repo "${{ github.repository }}"

      - name: Create branch if major release
        run: |
          echo "as long as there is no a major.x branch"
          existed_in_local=$(git ls-remote --heads origin ${TARGET_BRANCH})
          if [ -n "${existed_in_local}" ]; then
            echo -e "::warning::Target branch '${TARGET_BRANCH}' does exist."
            exit 0
          fi
          git branch -D $TARGET_BRANCH
          git push origin $TARGET_BRANCH
